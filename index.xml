<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Fat Codes</title><link>http://example.org/</link><description>Recent content on Fat Codes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 30 Jan 2020 15:10:08 +0200</lastBuildDate><atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml"/><item><title>TIPS: Best practices for git issue labels and tags</title><link>http://example.org/articles/tips-issue-labeling-system/</link><pubDate>Thu, 30 Jan 2020 15:10:08 +0200</pubDate><guid>http://example.org/articles/tips-issue-labeling-system/</guid><description>When you are somehow responsible of all the LOCs written at your company, your Gitlab top bar might look like this
If you are like me a software engineer, you probably have a lot of issues. Ahem, with issues i obiously mean project related issues, tracking tasks, bugs and whatsoever.
In order to oganize a big number of issues across multiple projects (with multiple components) at apio we developed a little system of labels: TIPS</description></item><item><title>CI/CD for NodeJS Microservices with Gitlab</title><link>http://example.org/articles/cicd-nodes-microservices-gitlab/</link><pubDate>Thu, 25 Jul 2019 08:28:36 +0200</pubDate><guid>http://example.org/articles/cicd-nodes-microservices-gitlab/</guid><description>At Apio we write a lot of microservices, we have a main platform on which our customers can interact with their IoT fleet, but we also have more vertical platforms like the Smart Lighting one for public lighting or the Smart Industry one for controlling production machines.
To handle this amount of microservices we needed to establish some sort of standard path for the whole microservice lifecycle, from design to deployment.</description></item><item><title>Useful Npm Scripts for Nodejs Microservices</title><link>http://example.org/articles/useful-npm-scripts-for-nodejs-microservices/</link><pubDate>Fri, 15 Feb 2019 09:33:14 +0100</pubDate><guid>http://example.org/articles/useful-npm-scripts-for-nodejs-microservices/</guid><description>When a man without a package.json meets a man with a package.json, the man without a package.json wants one.
That’s what clint eastwood would say if only he knew about the power of these files!
This is not properly a blog post, rather a collection of package.json scripts I’ve been using in the last 3–5 years. Please note that these are microservice oriented scripts, so if you are building / maintainging npm packages such as libraries or frameworks, some of these scripts won’t matter to you.</description></item><item><title>About</title><link>http://example.org/about/</link><pubDate>Sat, 09 Feb 2019 17:06:23 +0100</pubDate><guid>http://example.org/about/</guid><description>Hello friend,
My name is Mattia &amp;lsquo;fat&amp;rsquo; Alfieri, I am a software engineer focused on distributed systems, interested in AI and trying to make videogames (late at night).
I am currently working at Apio, where we we build and maintain microservices that empower thousands of devices connected from anywhere in the world.</description></item><item><title>Nodejs Microservices Release Script</title><link>http://example.org/articles/nodejs-microservices-release-script/</link><pubDate>Sat, 09 Feb 2019 15:48:38 +0100</pubDate><guid>http://example.org/articles/nodejs-microservices-release-script/</guid><description>At Apio, we take &amp;ldquo;not so smart objects&amp;rdquo; such as a meter, a switch, or any other kind of device, and we turn it into a super device, able to communicate through internet with our infrastructure and, eventually, join the &amp;ldquo;March of the Machines&amp;rdquo; against humanity.
Jokes aside, to turn anything like a meter measurement into actionable data (alerts, analytics, commands to other devices) we need to process data in several steps.</description></item></channel></rss>